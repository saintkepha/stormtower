// Generated by CoffeeScript 1.7.1
(function() {
  var StormAgent, StormBolt, StormData, StormRegistry, StormTower, TowerAgent, TowerRegistry,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormAgent = require('stormagent');

  StormData = StormAgent.StormData;

  TowerAgent = (function(_super) {
    var async, request;

    __extends(TowerAgent, _super);

    async = require('async');

    request = require('request');

    function TowerAgent(id, bolt) {
      this.id = id;
      this.bolt = bolt;
      this.status = false;
      TowerAgent.__super__.constructor.call(this, id);
    }

    TowerAgent.prototype.monitor = function(interval, callback) {
      this.monitoring = true;
      return async.whilst((function(_this) {
        return function() {
          return _this.monitoring;
        };
      })(this), (function(_this) {
        return function(repeat) {
          var err, req;
          try {
            req = request({
              uri: "http://" + _this.bolt.id + "/",
              timeout: interval
            });
            req.target = 8000;
            return _this.bolt.relay(req, function(reply, complete) {
              var checksum, md5, status;
              if (reply == null) {
                return;
              }
              if ((reply != null) && !reply instanceof Error && !complete) {
                return;
              }
              if (!(reply instanceof Error)) {
                md5 = crypto.createHash("md5");
                md5.update(reply);
                checksum = md5.digest("hex");
                if (checksum !== this.checksum) {
                  status = JSON.parse(reply);
                  this.status = status;
                  this.emit('changed', status, checksum);
                  if (callback != null) {
                    callback(status);
                  }
                }
              }
              return setTimeout(repeat, interval);
            });
          } catch (_error) {
            err = _error;
            _this.log("agent discovery request failed:", err);
            return setTimeout(repeat, interval);
          }
        };
      })(this), (function(_this) {
        return function(err) {
          return _this.log("agent discovery stopped for: " + _this.id);
        };
      })(this));
    };

    TowerAgent.prototype.destroy = function() {
      return this.monitoring = false;
    };

    return TowerAgent;

  })(StormData);

  StormRegistry = StormAgent.StormRegistry;

  TowerRegistry = (function(_super) {
    __extends(TowerRegistry, _super);

    function TowerRegistry(filename) {
      this.on('removed', function(tagent) {
        if (tagent.destroy != null) {
          return tagent.destroy();
        }
      });
      TowerRegistry.__super__.constructor.call(this, filename);
    }

    TowerRegistry.prototype.get = function(key) {
      var entry;
      entry = TowerRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      return entry.status;
    };

    return TowerRegistry;

  })(StormRegistry);

  StormBolt = require('stormbolt');

  StormTower = (function(_super) {
    var crypto;

    __extends(StormTower, _super);

    crypto = require("crypto");

    function StormTower(config) {
      StormTower.__super__.constructor.call(this, config);
      this["import"](module);
      this.agents = new TowerRegistry;
      this.checksum = function() {
        var agent, md5, _i, _len, _ref;
        md5 = crypto.createHash("md5");
        _ref = this.agents.list();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          agent = _ref[_i];
          md5.update(agent);
        }
        return md5.digest("hex");
      };
      this.clients.on('added', (function(_this) {
        return function(bolt) {
          var entry;
          entry = _this.agents.add(bolt.id, new TowerAgent(bolt.id, bolt));
          entry.on('changed', function(status, checksum) {
            return this.agents.emit('changed');
          });
          return entry.monitor(_this.config.repeatdelay, function(status) {

            /*
            entry.status = data
            @agents.update bolt.id, entry
             */
          });
        };
      })(this));
      this.clients.on('removed', (function(_this) {
        return function(bolt) {
          return _this.agents.remove(bolt.id);
        };
      })(this));
    }

    StormTower.prototype.status = function() {
      var state;
      state = StormTower.__super__.status.apply(this, arguments);
      state.agents = this.agents.list();
      return state;
    };

    return StormTower;

  })(StormBolt);

  module.exports = StormTower;

}).call(this);
