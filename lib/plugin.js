// Generated by CoffeeScript 1.7.1
(function() {
  this.include = function() {
    var agent, httpOptions, log, reqTimeout;
    agent = this.settings.agent;
    log = agent.log;
    agent.startPolling();
    httpOptions = {
      agent: false,
      port: GLOBAL.config.stormbolt.split(':')[1],
      hostname: GLOBAL.config.stormbolt.split(':')[0]
    };
    reqTimeout = {
      get: 5000,
      put: 5000,
      del: 5000,
      post: 15000
    };
    this.head({
      '/': function() {
        var cnameList;
        log('[PROXY] HEAD /');
        cnameList = this.req.query.cnames;
        log('[PROXY] cname list received is ', cnameList);
        this.res.header('Content-MD5', agent.getGlobalChecksum(cnameList));
        return this.res.send('');
      }
    });
    this.get({
      '/': function() {
        var cnameList;
        log('[PROXY] GET /');
        cnameList = this.req.query.cnames;
        log('[PROXY] cname list received is ', cnameList);
        return this.json(agent.getPollingData(cnameList));
      }
    });
    this.get({
      '/stormtower/stormflash/*': function() {
        var cname, resZappajs;
        log('[PROXY GET] url: /', this.request.params[0]);
        cname = this.request.headers['stormbolt-target'].split(':')[0];
        httpOptions.method = 'GET';
        httpOptions.path = '/' + this.request.params[0];
        httpOptions.headers = {
          'stormbolt-target': this.request.headers['stormbolt-target']
        };
        resZappajs = this.res;
        httpReqSender(httpOptions, null, reqTimeout.get, cname, function(reply) {
          log("[PROXY GET] " + cname + " received callback ", reply);
          resZappajs.statusCode = reply.status;
          return resZappajs.json(reply.output);
        });
        return log("[PROXY GET] " + cname + " response sent back");
      }
    });
    this.post({
      '/stormtower/stormflash/*': function() {
        var cname, resZappajs;
        log('[PROXY POST] url: /', this.request.params[0]);
        cname = this.request.headers['stormbolt-target'].split(':')[0];
        httpOptions.method = 'POST';
        httpOptions.path = '/' + this.request.params[0];
        httpOptions.headers = {
          'stormbolt-target': this.request.headers['stormbolt-target']
        };
        resZappajs = this.res;
        httpReqSender(httpOptions, this.body, reqTimeout.post, cname, function(reply) {
          log("[PROXY POST] " + cname + " received callback ", reply);
          resZappajs.statusCode = reply.status;
          return resZappajs.json(reply.output);
        });
        return log("[PROXY POST] " + cname + " response sent back");
      }
    });
    this.put({
      '/stormtower/stormflash/*': function() {
        var cname, resZappajs;
        log('[PROXY PUT] url: /', this.request.params[0]);
        cname = this.request.headers['stormbolt-target'].split(':')[0];
        httpOptions.method = 'PUT';
        httpOptions.path = '/' + this.request.params[0];
        httpOptions.headers = {
          'stormbolt-target': this.request.headers['stormbolt-target']
        };
        resZappajs = this.res;
        httpReqSender(httpOptions, this.body, reqTimeout.put, cname, function(reply) {
          log(("[PROXY PUT] " + cname + " received callback ") + reply);
          resZappajs.statusCode = reply.status;
          return resZappajs.json(reply.output);
        });
        return log("[PROXY PUT] " + cname + " response sent back");
      }
    });
    return this.del({
      '/stormtower/stormflash/*': function() {
        var cname, resZappajs;
        log('[PROXY DELETE] url: /', this.request.params[0]);
        cname = this.request.headers['stormbolt-target'].split(':')[0];
        httpOptions.method = 'DELETE';
        httpOptions.path = '/' + this.request.params[0];
        httpOptions.headers = {
          'stormbolt-target': this.request.headers['stormbolt-target']
        };
        resZappajs = this.res;
        httpReqSender(httpOptions, null, reqTimeout.del, cname, function(reply) {
          log("[PROXY DELETE] " + cname + " received callback ", reply);
          resZappajs.statusCode = reply.status;
          return resZappajs.json(reply.output);
        });
        return log("[PROXY DELETE] " + cname + " response sent back");
      }
    });
  };

}).call(this);
